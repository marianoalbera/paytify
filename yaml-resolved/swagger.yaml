---
swagger: "2.0"
info:
  description: |
    Paytify is a 100% serverless API designed to allow merchants to take payments and retrieve information about previous transactions. It implements a 2-phase-commit model where all transactions need to be authorized first and charged later. That gives the merchant more flexibility to confirm the availability of the products before securing the charge.

    **Paytify** aims to simplify payment integrations by delivering a very simple api flow. All transactions require the customer card to be Tokenized for security, then the payment request needs to be first authorized and then charged. Throught the authorization process the client might be asked to implement an extra SCA "Strong Customer Authentication" flow in order to authenticate the customer on a 2nd factor before moving on into the final charge transaction.
  version: 1.0.0
  title: PaytiFy Payments API
  contact:
    email: malbera@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /malbesoft/Paytify/1.0.0
tags:
- name: Cards
  description: Used for all card related endpoints
- name: Transactions
  description: Used for all transaction related endpoints
- name: Customers
  description: Used for all customer related endpoints
schemes:
- https
paths:
  /cards/tokenize:
    post:
      tags:
      - Cards
      summary: Tokenizes the card details
      description: |
        By passing the card details you recieve a token to be used later in the other parts of the flow. You can store this token in your system without having to worry about sensitive information although the Token is valid only for a small period of time.
      operationId: tokenizeCard
      produces:
      - application/json
      parameters:
      - name: API-Version
        in: header
        description: |
          Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.
        required: true
        type: integer
      - name: API-Token
        in: header
        description: |
          Your API token to validate your merchant access
        required: true
        type: string
      - in: body
        name: details
        description: Card Details
        required: true
        schema:
          $ref: '#/definitions/CardDetails'
      responses:
        "200":
          description: On a succesfull execution it will return the token to be used for card transactions
          schema:
            $ref: '#/definitions/CardToken'
        "400":
          description: Bad Request, your request is missing one or many parameters in the correct format
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Your API token is either expired or invalid
          schema:
            $ref: '#/definitions/Error'
        "402":
          description: Your Card cannot be tokenized
          schema:
            $ref: '#/definitions/Error'
  /cards/authorize:
    post:
      tags:
      - Cards
      summary: |
        Authorizes the transaction and hold the funds or returns a detail error or SCA requirement.
      description: |
        By passing a valid card token you will be able to pre authorize a transaction, this pre authorization will validate fraud, card status and card funding, resulting in a temporary block of the funds in the card account.
      operationId: authorizeCard
      produces:
      - application/json
      parameters:
      - name: API-Version
        in: header
        description: |
          Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.
        required: true
        type: integer
      - name: API-Token
        in: header
        description: |
          Your API token to validate your merchant access
        required: true
        type: string
      - in: body
        name: details
        description: Card Auth request
        required: true
        schema:
          $ref: '#/definitions/CardAuthorizationRequest'
      responses:
        "200":
          description: |
            on a succesful execution it will return the authentication  information to be used then on the charge object
          schema:
            $ref: '#/definitions/CardAuthorization'
        "400":
          description: Bad Request, your request is missing one or many parameters in the correct format
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Your API token is either expired or invalid
          schema:
            $ref: '#/definitions/Error'
        "402":
          description: Your authorization was not succesful, please check the errors for more info
          schema:
            $ref: '#/definitions/Error'
        "403":
          description: 'Your request has been processed but requires further customer authentication before it can be charged. Funds have not been held and will only do when the SCA is processed '
          schema:
            $ref: '#/definitions/CardAuthorization'
  /cards/charge:
    post:
      tags:
      - Cards
      summary: Creates a charge from an existing authorization and captures the funds from the customer's card
      description: |
        By passing the existing authorization details you commit the charge for the card into the systems
      operationId: chargeCard
      produces:
      - application/json
      parameters:
      - name: API-Version
        in: header
        description: |
          Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.
        required: true
        type: integer
      - name: API-Token
        in: header
        description: |
          Your API token to validate your merchant access
        required: true
        type: string
      - in: body
        name: details
        description: Charge request details
        required: true
        schema:
          $ref: '#/definitions/CardChargeRequest'
      responses:
        "200":
          description: On a succesful charge it will return information about the transaction
          schema:
            $ref: '#/definitions/PaymentTransaction'
        "400":
          description: Bad Request, your request is missing one or many parameters in the correct format
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Your API token is either expired or invalid
          schema:
            $ref: '#/definitions/Error'
        "402":
          description: The charge has been declined for one or many reasons. Check transaction log for more information
          schema:
            $ref: '#/definitions/Error'
  /customers/sca:
    post:
      tags:
      - Customers
      summary: This endpoint will create a new SCA request for the transaction and return the URL to show the customer
      description: |
        By passing a valid transaction id and url for call back we will generate the url that needs  to be displayed to the customer in order to proceed with the SCA
      operationId: sca
      produces:
      - application/json
      parameters:
      - name: API-Version
        in: header
        description: |
          Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.
        required: true
        type: integer
      - name: API-Token
        in: header
        description: |
          Your API token to validate your merchant access
        required: true
        type: string
      - in: body
        name: details
        description: SCA Request
        required: true
        schema:
          $ref: '#/definitions/StrongCustomerAuthenticationRequest'
      responses:
        "200":
          description: On a succesful execution it will return the SCA information to be used for the customer to complete SCA
          schema:
            $ref: '#/definitions/StrongCustomerAuthentication'
        "400":
          description: Bad Request, your request is missing one or many parameters in the correct format
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Your API token is either expired or invalid
          schema:
            $ref: '#/definitions/Error'
        "402":
          description: Your sca request was not succesful, please check the errors for more info
          schema:
            $ref: '#/definitions/Error'
  /transactions/{transactionId}/:
    get:
      tags:
      - Transactions
      summary: Retrieves an existing transaction information
      description: |
        Used to retrieve all the information of an existing trasaction based on the transactionId
      operationId: transactionRetrieve
      produces:
      - application/json
      parameters:
      - name: API-Version
        in: header
        description: |
          Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.
        required: true
        type: integer
      - name: API-Token
        in: header
        description: |
          Your API token to validate your merchant access
        required: true
        type: string
      - name: transactionId
        in: path
        description: The transactionId of the transaction to be retrieved.
        required: true
        type: string
      responses:
        "200":
          description: If succesful it will return updated regarding the transaction
          schema:
            $ref: '#/definitions/PaymentTransaction'
        "400":
          description: Bad Request, your request is missing one or many parameters in the correct format
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Your API token is either expired or invalid
          schema:
            $ref: '#/definitions/Error'
        "402":
          description: Retrieve failed, either that transaction does not exist or you are not authorized to retrieve it
          schema:
            $ref: '#/definitions/Error'
definitions:
  Error:
    type: object
    required:
    - detail
    - status
    - title
    - type
    properties:
      type:
        type: string
        example: Insufficient_funds
        description: |
          The type of the error. This is what you should match against when implementing error handling.
      title:
        type: string
        example: You account doesnt have enough funds to authorize this payment
        description: The human-readable version of the error.
      detail:
        type: string
        description: |
          Any relevant details about the error. May include suggestions for handling it. Can be an empty string if no extra details are available.
      status:
        type: integer
        format: int32
        example: 402
        description: |
          The HTTP status code of this error response. Included to aid
          those frameworks that have a hard time working with anything
          other than the body of an HTTP response.
  TransactionLog:
    type: object
    properties:
      transactionLogCode:
        type: string
        example: FRDS
        description: A 4 letter code for the type of this transaction log
        minLength: 4
        maxLength: 4
      transactionLogvalue:
        type: object
        example: '{dateTime:''2020-10-15 20:01:55'', service:''Anti Fraud System'', messageCode:1001, message:'' Fraud system processed the transaction, result is low risk''}'
        description: a json object with relevant data regarding the type of transaction
        properties: {}
    description: a key-value list including various types of information regarding the transaction
  CurrencyAmount:
    type: object
    properties:
      currency:
        type: string
        example: EUR
        description: 3 letter ISO 4217 currency code standard
        minLength: 3
        maxLength: 3
      value:
        type: integer
        example: 100
        description: The total amount to be authorized in the card account in the smallest posible unit
  CardHolder:
    type: object
    required:
    - addressLine
    - countryCode
    - name
    - postCode
    properties:
      name:
        type: string
        example: Mr Steve Wozniak
        description: Cardholder's name as it appears on the card
        minLength: 3
        maxLength: 64
      addressLine:
        type: string
        example: 1 infinite loop, cupertino
        description: Cardholder's address as its registered on the card issuer
        minLength: 3
        maxLength: 64
      postCode:
        type: string
        example: "95014"
        description: Cardholder's address as its registered on the card issuer
        minLength: 3
        maxLength: 64
      countryCode:
        type: string
        example: US
        description: Alpha 2 Iso 3166-1 country code
        minLength: 2
        maxLength: 2
  CardDetails:
    type: object
    required:
    - cardHolder
    - cardNumber
    - cv2
    - expireMonth
    - expireYear
    properties:
      cardNumber:
        type: string
        example: "4242424242424242"
        description: Card number as it appears on the card, with no separators
        minLength: 15
        maxLength: 16
      expireMonth:
        type: string
        format: MM
        example: "8.0"
        description: Expiration month on the card with format MM
        minLength: 2
        maxLength: 2
      expireYear:
        type: string
        format: YYYY
        example: "2020"
        description: Expiration year on the card with format YYYY
        minLength: 4
        maxLength: 4
      cv2:
        type: number
        example: 123.0
        description: Those very important 3 numbers at the back of the card, or 4 numbers in the front of any amex
      cardHolder:
        $ref: '#/definitions/CardHolder'
  CardToken:
    type: object
    properties:
      id:
        type: string
        example: zDzgTJThFCaUojhRvFn9MGF22DOdeSwP
        description: randomly generated unicode token
        minLength: 32
        maxLength: 32
      created:
        type: string
        format: yyyyMMdd hh24:mm:ss
        example: 20201015 23:55:50
        description: timestamp when the token was created
      expiration:
        type: string
        format: yyyyMMdd hh24:mm:ss
        example: 20201016 01:55:50
        description: timestamp on when the token will expire
  CardAuthorizationRequest:
    type: object
    required:
    - amount
    - cardToken
    properties:
      cardToken:
        $ref: '#/definitions/CardToken'
      amount:
        $ref: '#/definitions/CurrencyAmount'
  CardAuthorization:
    type: object
    properties:
      transactionId:
        type: string
        description: A master identification for the transaction, needed further in the process on many other transactions
      authorizationId:
        type: string
        description: An identification for the authorization, needed further in the process for ex. to charge the card
      amountAuthorized:
        $ref: '#/definitions/CurrencyAmount'
      StrongCustomerAuthRequired:
        type: boolean
        description: if true this means you need to process a strong customer authentication before moving into charge
      transactionLog:
        type: array
        description: The transaction log array will return various information regarding the transaction
        items:
          $ref: '#/definitions/TransactionLog'
      expiration:
        type: string
        format: yyyyMMdd hh24:mm:ss
        example: 20201016 01:55:50
        description: Timestamp on when the authorization will expire
  StrongCustomerAuthenticationRequest:
    type: object
    properties:
      transctionId:
        type: string
      returnEndpoint:
        type: string
        description: The endpoint where we will call you once the customer fulfils the SCA challenge
  StrongCustomerAuthentication:
    type: object
    properties:
      transctionId:
        type: string
      StrongCustomerAuthUrl:
        type: string
        description: The URL you need to display to the customer in order to process SCA
      transactionLog:
        type: array
        description: The transaction log array will return various information regarding the transaction
        items:
          $ref: '#/definitions/TransactionLog'
      expiration:
        type: string
        format: yyyyMMdd hh24:mm:ss
        example: 20201016 01:55:50
        description: Timestamp on when the url will expire
  CardChargeRequest:
    type: object
    required:
    - amount
    - authorizationId
    - cardToken
    - transactionId
    properties:
      cardToken:
        $ref: '#/definitions/CardToken'
      transactionId:
        type: string
        description: A master identification for the transaction, needed further in the process on many other transactions
      authorizationId:
        type: string
        description: An identification for the authorization, needed further in the process for ex. to charge the card
      amount:
        description: The amount to be charged must be equal or smaller than the previously authorized amount
        $ref: '#/definitions/CurrencyAmount'
      metaData:
        type: object
        example: '{clientId : 1, newCustomer: true, point_of_sale: 123}'
        description: We will store any object sent here in our system associated wiht the transaction
        properties: {}
  PaymentTransaction:
    type: object
    properties:
      paymentType:
        type: string
        description: The type of payment that was used to create this transaction
        enum:
        - Card
        - Other
      transctionId:
        type: string
      transactionStatus:
        type: string
        description: Status of the transaction order at the time of this response
        enum:
        - None
        - Authorized
        - Authorization Expired
        - Declined
        - Voided
        - Captured
        - Refunded
        - Settled
        - Canceled
      transactionStatusInformation:
        type: array
        description: This element contains more information regarding the latest transaction status
        items:
          $ref: '#/definitions/PaymentTransaction_transactionStatusInformation'
      amount:
        $ref: '#/definitions/CurrencyAmount'
      transactionLog:
        type: array
        description: The transaction log array will return various information regarding the transaction
        items:
          $ref: '#/definitions/TransactionLog'
  PaymentTransaction_transactionStatusInformation:
    type: object
    properties:
      statusCode:
        type: integer
      statusMessage:
        type: string
